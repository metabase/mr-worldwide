(ns mr-worldwide.build.artifacts
  (:require
   [clojure.pprint :as pprint]
   [clojure.tools.logging :as log]
   [mr-worldwide.build.artifacts.clj :as clj]
   [mr-worldwide.build.artifacts.cljs :as cljs]
   [mr-worldwide.build.common :as common]
   [mr-worldwide.build.util :as u]))

(defn- config-file-contents [{:keys [packages bundle], :as config}]
  {:pre [(seq packages) (string? bundle)]}
  {:locales  (conj (common/locales config) "en")
   :packages packages
   :bundle   bundle})

(defn- generate-config-file! [{:keys [config-filename], :as config}]
  {:pre [(some? config-filename)]}
  (u/delete-file-if-exists! config-filename)
  (spit config-filename
        (with-out-str
          (println ";; DO NOT EDIT THIS FILE!")
          (println ";; It is autogenerated by `mr-worldwide.build.artifacts`.")
          (pprint/pprint (config-file-contents config))))
  (u/assert-file-exists config-filename))

(defn- create-artifacts-for-locale! [config locale]
  (log/infof "Create artifacts for locale %s" (pr-str locale))
  (cljs/create-artifact-for-locale! config locale)
  (clj/create-artifact-for-locale! config locale)
  (log/infof "Artifacts for locale %s created successfully." (pr-str locale)))

(defn- create-artifacts-for-all-locales! [{:keys [clj-target-directory cljs-target-directory], :as config}]
  {:pre [(some? clj-target-directory) (some? cljs-target-directory)]}
  ;; Empty directory in case some locales were removed
  (u/delete-file-if-exists! clj-target-directory)
  (u/delete-file-if-exists! cljs-target-directory)
  (doseq [locale (common/locales config)]
    (create-artifacts-for-locale! config locale)))

(defn create-artifacts!
  "Create Clojure(Script) i18n artifacts."
  [config]
  (let [target-directory (get config :target-directory "resources/mr-worldwide")
        config           (merge {:po-files-directory    "target/mr-worldwide"
                                 :target-directory      target-directory
                                 :clj-target-directory  (u/filename target-directory "clj")
                                 :cljs-target-directory (u/filename target-directory "cljs")
                                 :config-filename       (u/filename target-directory "config.edn")
                                 :packages              ["mr_worldwide"]
                                 :bundle                "mr_worldwide.Messages"}
                                config)]
    (log/info "Create i18n artifacts")
    (u/create-directory-unless-exists! target-directory)
    (generate-config-file! config)
    (create-artifacts-for-all-locales! config)
    (log/info "Translation resources built successfully.")))
